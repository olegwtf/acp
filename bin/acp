#!/usr/bin/perl

use strict;
use utf8;
use Gtk2 -init;
use Gtk2::Notify -init, 'XY';
use Gtk2::GladeXML; # TODO: move to gtk builder
use WWW::AOstat::NB::Glib;

use constant
{
	GLADE                => '/usr/share/apps/acp/acp.glade',
	ICON_WAIT            => '/usr/share/apps/acp/acp_wait.png',
	ICON_GREEN           => '/usr/share/apps/acp/acp_green.png',
	ICON_BROWN           => '/usr/share/apps/acp/acp_brown.png',
	ICON_GRAY            => '/usr/share/apps/acp/acp_gray.png',
	ICON_MAIN            => '/usr/share/apps/acp/acp_main.ico',
	CONFIG               => '/usr/share/apps/acp/acp.conf',
	ACP_VERSION          => 0.300,
	ACP_SERVER           => 'http://prozer.at.nsu.ru/acp/get.php'
};

$SIG{HUP} = $SIG{TERM} = $SIG{INT} = \&on_quit;

my $acp_path = "$ENV{HOME}/.acp";
my $user     =  $ENV{USER};

#checking configuration in ~/
mkdir $acp_path                                      or die "Can't create dir $acp_path"            unless -d  $acp_path;
put_file("$acp_path/acp.conf",  get_file(CONFIG))    or die "Can't create file $acp_path/acp.conf"  unless -f "$acp_path/acp.conf";
chmod(0600, "$acp_path/acp.conf")                    or die "Can't chmod file $acp_path/acp.conf"   unless (stat("$acp_path/acp.conf"))[2] == 33152;

require "$acp_path/acp.conf";

our %config;
$config{password} = $config{password} ? xcrypt($config{password}, $user) : $config{password};

my $online = -1;
my $click  =  0;
my $upd    =  0;

# GUI DECLARATION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
my $glade  = Gtk2::GladeXML->new(GLADE);
$glade->signal_autoconnect_from_package('main');

my $window = $glade->get_widget('window1');
$window->set_icon_from_file(ICON_MAIN);

my $l_entry = $glade->get_widget('entry1');
$l_entry->set_text($config{login});

my $p_entry = $glade->get_widget('entry2');
$p_entry->set_text($config{password});

my $s1_btn = $glade->get_widget('button1');
my $s2_btn = $glade->get_widget('button2');

my $stat_refr_spin = $glade->get_widget('spinbutton3');
$stat_refr_spin->set_value($config{stat_refresh});

my $do_log_check = $glade->get_widget('checkbutton3');
$do_log_check->set_active($config{do_log});

my $inet_autoen_check = $glade->get_widget('checkbutton4');
$inet_autoen_check->set_active($config{inet_enable});

my $inet_autodis_check = $glade->get_widget('checkbutton5');
$inet_autodis_check->set_active($config{inet_disable});

my $bal_notify_check = $glade->get_widget('checkbutton1');
$bal_notify_check->set_active($config{bal_notify});

my $bal_notify_spin = $glade->get_widget('spinbutton1');
$bal_notify_spin->set_value($config{bal_notify_val});

my $cred_notify_check = $glade->get_widget('checkbutton2');
$cred_notify_check->set_active($config{cred_notify});

my $cred_notify_spin = $glade->get_widget('spinbutton2');
$cred_notify_spin->set_value($config{cred_notify_val});

my $period_notify_spin = $glade->get_widget('spinbutton5');
$period_notify_spin->set_value($config{period_notify});

my $acp_upd_check = $glade->get_widget('checkbutton7');
$acp_upd_check->set_active($config{acp_update});

my $interv_upd_spin = $glade->get_widget('spinbutton4');
$interv_upd_spin->set_value($config{int_update});

my @holidays = map($glade->get_widget("checkbutton$_"), (8..14));
$holidays[$_]->set_active($config{holidays}[$_]) for(0..6);

my $tray_icon = Gtk2::StatusIcon->new_from_file(ICON_WAIT);
$tray_icon->set_tooltip('Загружается...');
$tray_icon->signal_connect(popup_menu => \&on_popup);
$tray_icon->signal_connect(activate => \&on_click);

my $menu = Gtk2::Menu->new;
my $menu_opt = Gtk2::ImageMenuItem->new_from_stock('gtk-preferences');
$menu_opt->signal_connect('activate' => \&on_show);
$menu->append($menu_opt);
$menu_opt = Gtk2::ImageMenuItem->new('Лог');
$menu_opt->set_image(Gtk2::Image->new_from_stock('gtk-edit', 'menu'));
$menu_opt->signal_connect('activate' => \&on_showlog);
$menu->append($menu_opt);
$menu_opt = Gtk2::ImageMenuItem->new('Обновления');
$menu_opt->set_image(Gtk2::Image->new_from_stock('gtk-refresh', 'menu'));
$menu_opt->signal_connect('activate' => \&on_checkupd, 1);
$menu->append($menu_opt);
$menu_opt = Gtk2::ImageMenuItem->new_from_stock('gtk-about');
$menu_opt->signal_connect('activate' => \&on_about);
$menu->append($menu_opt);
$menu_opt = Gtk2::ImageMenuItem->new_from_stock('gtk-quit');
$menu_opt->signal_connect('activate' => \&on_quit);
$menu->append($menu_opt);

my $notify = Gtk2::Notify->new('Academ.org Control Panel');
$notify->set_timeout(10000);

Gtk2::AboutDialog->set_url_hook(sub{});

# TIMERS DECLARATION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Glib::Timeout->add($config{int_update}*1000*60*60, \&on_checkupd);
Glib::Timeout->add(10*1000, sub{ on_checkupd(); return 0 });
Glib::Timeout->add(1*1000,  sub{ notify("Задайте логин и пароль от страницы статистики") unless $config{login} && $config{password}; return 0 });

# START POINT
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
my $ao = WWW::AOstat::NB::Glib->new();
$ao->login($config{login}, $config{password}, \&get_stat);

Gtk2->main;


# USER ACTIONS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sub on_delete
{
	$window->hide;
	1;
}

sub on_about
{
	local $/ = undef;
	Gtk2->show_about_dialog
	(
		$window,
		program_name => 'ACP',
		version      => ACP_VERSION,
		comments     => "ACP - Academ.org Control Panel для Linux",
		license      => <DATA>,
		authors      => 'Олег Г. <verdrehung@gmail.com>',
		icon         => $window->get_icon,
		artists      => ['Алексей Б. <kilex@xmpp.ru>', 'Алексей В. <forlexan@gmail.com>', 'Олег Г. <verdrehung@gmail.com>'],
		website      => substr(ACP_SERVER, 0, -7)
	);
}

sub on_show
{
	$window->show;
}

sub on_quit
{
	Gtk2->main_quit;
}

sub on_save
{
	$s1_btn->set_sensitive(0);
	$s2_btn->set_sensitive(0);
	$ao->login(
		$l_entry->get_text, $p_entry->get_text,
		sub {
			if (@_) {
				if(save_settings()) {
					do "$acp_path/acp.conf";
					$config{password} = $config{password} ? xcrypt($config{password}, $user) : $config{password};
					say_msg("Настройки сохранены", 'info');
				}
				else {
					say_msg("Ошибка сохранения настроек", 'error');
				}
			}
			else {
				say_msg("Неверный логин или пароль\nНастройки не сохранены", 'error');
			}
			
			$s1_btn->set_sensitive(1);
			$s2_btn->set_sensitive(1);
		}
	);
}

sub on_popup
{
	$menu->show_all;
	$menu->popup(undef, undef, undef, undef, 3, $_[2]);
}

sub on_showlog
{
	my $window = Gtk2::Window->new('toplevel');
	$window->set_default_size(450, 400);
	$window->set_title("ACP: просмотр лога");
	$window->set_position("center");
	
	my $scrolled = Gtk2::ScrolledWindow->new;
	$window->add($scrolled);
	
	my $buffer = Gtk2::TextBuffer->new;
	my $log = get_file("$acp_path/acp.log");
	$buffer->set_text($log);
	my $textview = Gtk2::TextView->new_with_buffer($buffer);
	
	$scrolled->add($textview);
	$window->show_all;
}

sub on_click
{
	$click++;
	if($click == 2)
	{
		$click = 0;
		$tray_icon->set_from_file(ICON_WAIT);
		$ao->turn(!$online, \&get_stat);
	}
	else
	{
		Glib::Timeout->add(250, \&on_single_click);
	}
}

sub on_checkupd
{
	my $useract = shift;
	$ao->geturl(
		ACP_SERVER . '?cat=last',
		sub {
			my ($acp_v, undef) = split /__/, $_[0];
	
			if ($acp_v && $acp_v =~ /^[\d.]+$/ && $acp_v > ACP_VERSION) {
				notify("Доступна для скачивания ACP версии $acp_v");
			}
			elsif ($useract) {
				notify('Вы используете последнюю версию программы');
			}
			
			$tray_icon->set_from_file((tell_status($online))[0]);
		}
	);
	
	1;
}

sub on_single_click
{
	if($click)
	{
		$click = 0;
		$tray_icon->set_from_file(ICON_WAIT);
		get_stat();
	}
	
	return 0;
}

# HELP FUNCTIONS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sub get_stat
{
	$ao->stat(
		sub {
			my ($traff, $money, $status, $cred_sum, $cred_time) = @_;
			$online = $status;

			my ($icon, $msg) = tell_status($status);
			#put_file("$acp_path/acp.log", "[".date()."]\t".sprintf('%-20s', $bal)."\t$msg\n", '>>')
			#or say_msg("Ошибка записи в файл `$acp_path/acp.log'", 'error') if $config{do_log};
			
			$tray_icon->set_tooltip("Баланс: $money".($cred_sum ? "\nКредит: $cred_sum руб ($cred_time дн)" : ""));
			$tray_icon->set_from_file($icon);
			
			if($config{cred_notify} && $cred_time && ($cred_time < $config{cred_notify_val} || on_holiday($cred_time)) && !$upd && $online!=-1)
			{
				$upd++;
				notify("Обещанный платеж истекает через $cred_time дн.\nНе забудьте пополнить баланс");
			}
			elsif($config{bal_notify} && (split(/\s/, $money))[0] < $config{bal_notify_val} && !$upd && $online!=-1)
			{
				$upd++;
				notify("На вашем счете осталось $money\nНе забудьте пополнить баланс");
			}
			elsif($upd)
			{
				$upd++;
			}
			
			$upd = 0 if $upd > $config{period_notify}-1;
		}
	);
}

sub put_file
{
	my ($file, $data, $mode) = @_;
	
	utf8::encode($data);
	open my $fh, $mode||'>', "$file" or return;
	print $fh $data;
	close $fh;
}

sub get_file
{
	my $file = shift;
	open my $fh, '<:utf8', $file or return;
	local $/ = undef;
	my $content = <$fh>;
	close $fh;
	
	return $content;
}

sub say_msg
{
	my ($msg, $type) = @_;
	
	my $title;
	   if ($type eq 'warning') { $title = 'Предупреждение' }
	elsif ($type eq 'info')    { $title = 'Сообщение'      }
	elsif ($type eq 'error')   { $title = 'Ошибка'         }
	
	my $dialog = Gtk2::MessageDialog->new($window, 'modal', $type, 'ok', $msg);
	$dialog->set_title($title);
	$dialog->run;
	$dialog->destroy;
	return 0;
}

sub save_settings
{
	my $password = xcrypt($p_entry->get_text, $user);
	$password =~ s/'/\\'/g;
	my $config = 
	'our %config'.";\n\n"
	.'$config{login} = \''.$l_entry->get_text."';\n"
	.'$config{password} = \''.$password."';\n"
	.'$config{stat_refresh} = '.$stat_refr_spin->get_value.";\n"
	.'$config{do_log} = '.($do_log_check->get_active+0).";\n"
	.'$config{inet_enable} = '.($inet_autoen_check->get_active+0).";\n"
	.'$config{inet_disable} = '.($inet_autodis_check->get_active+0).";\n"
	.'$config{bal_notify} = '.($bal_notify_check->get_active+0).";\n"
	.'$config{bal_notify_val} = '.$bal_notify_spin->get_value.";\n"
	.'$config{cred_notify} = '.($cred_notify_check->get_active+0).";\n"
	.'$config{cred_notify_val} = '.$cred_notify_spin->get_value.";\n"
	.'$config{period_notify} = '.$period_notify_spin->get_value.";\n"
	.'$config{acp_update} = '.($acp_upd_check->get_active+0).";\n"
	.'$config{int_update} = '.($interv_upd_spin->get_value).";\n"
	.'$config{holidays} = ['.join(',', map($_->get_active+0, @holidays))."];\n1;\n";
	
	put_file("$acp_path/acp.conf", $config) or return say_msg("Ошибка сохранения настроек:\nневозможно осуществить запись в файл `$acp_path/acp.conf'\n", 'error');
}

sub tell_status
{
	my $code = shift;
	
	return (ICON_GREEN, 'интернет включен')  if $code == 1;
	return (ICON_BROWN, 'интернет выключен') if $code == 0;
	return (ICON_GRAY, 'статистика недоступна');
}

sub date
{
	my ($sec, $min, $hour, $mday, $mon) = localtime;
	
	return sprintf('%02d', $mday).'.'.sprintf('%02d', ++$mon).' '.sprintf('%02d', $hour).':'.sprintf('%02d', $min).':'.sprintf('%02d', $sec);
}

sub notify
{
	my $msg = shift;
	my $rect = ($tray_icon->get_geometry)[1];
	$notify->set_hint_int32('x', $rect->x+10);
	$notify->set_hint_int32('y', $rect->y);
	$notify->update('Academ.org Control Panel', $msg);
	$notify->show;
}

sub on_holiday
{
	my $rest  = shift;
	my $today = (localtime)[6];
	
	for(my $i=1; $i<$rest; $i++)
	{
		return 0 unless $config{holidays}[($today+$i) % 7];
	}
	
	return 1;
}

sub xcrypt
{
	my ($msg, $key) = @_;
	
	my $diff = length($msg) - length($key);
	if($diff > 0)
	{ # key is smaller then msg
		do
		{
			$key .= substr($key, 0, $diff);
			$diff = length($msg) - length($key);
			
		}while($diff);
	}
	elsif($diff < 0)
	{ # key is bigger then msg
		$key = substr($key, 0, $diff);
	}
	
	return $msg ^ $key;
}

__DATA__
ACP является свободным программным обеспечением; вы можете распространять
и/или изменять его согласно условиям Стандартной Общественной Лицензии GNU
(GNU GPL), опубликованной Фондом свободного программного обеспечения (FSF),
либо Лицензии версии 2, либо (на ваше усмотрение) любой более поздней версии.

Программа распространяется в надежде, что она будет полезной, но БЕЗ КАКИХ
БЫ ТО НИ БЫЛО ГАРАНТИЙНЫХ ОБЯЗАТЕЛЬСТВ; даже без косвенных гарантийных 
обязательств, связанных с ПОТРЕБИТЕЛЬСКИМИ СВОЙСТВАМИ и ПРИГОДНОСТЬЮ ДЛЯ 
ОПРЕДЕЛЕННЫХ ЦЕЛЕЙ. Для подробностей смотрите Стандартную Общественную 
Лицензию GNU.

Вы должны были получить копию Стандартной Общественной Лицензии GNU вместе 
с этой программой. Если это не так, напишите в Фонд Свободного ПО (Free 
Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA)
